{
	"name": "dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "AzureSqlTable4",
						"type": "DatasetReference"
					},
					"name": "inventory"
				},
				{
					"dataset": {
						"referenceName": "AzureSqlTableWarehouse",
						"type": "DatasetReference"
					},
					"name": "warehouse"
				},
				{
					"dataset": {
						"referenceName": "AzureSqlTableLocation",
						"type": "DatasetReference"
					},
					"name": "location"
				},
				{
					"dataset": {
						"referenceName": "AzureSqlTable3",
						"type": "DatasetReference"
					},
					"name": "product"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "AzureSqlTable5",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "join1"
				},
				{
					"name": "select1"
				},
				{
					"name": "join2"
				},
				{
					"name": "select2"
				},
				{
					"name": "join3"
				},
				{
					"name": "select3"
				}
			],
			"scriptLines": [
				"source(output(",
				"          InventoryID as string,",
				"          InventoryAvailable as long,",
				"          MinStockLevel as long,",
				"          MaxStockLevel as long,",
				"          ReorderPoint as long,",
				"          WarehouseID as string,",
				"          ProductID as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> inventory",
				"source(output(",
				"          WarehouseID as string,",
				"          WarehouseName as string,",
				"          isRefrigerated as boolean,",
				"          LocationID as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> warehouse",
				"source(output(",
				"          LocationID as string,",
				"          LocationName as string,",
				"          LocationAddress as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> location",
				"source(output(",
				"          ProductID as string,",
				"          ProductCode as string,",
				"          BarCode as long,",
				"          ProductName as string,",
				"          ProductDescription as string,",
				"          ProductCategory as string,",
				"          CostPrice as double,",
				"          SellPrice as double,",
				"          MaxretailPrice as string,",
				"          ReorderQuantity as integer,",
				"          PackedWeight as integer,",
				"          PackedHeight as integer,",
				"          PackedWidth as integer,",
				"          PackedDepth as integer,",
				"          Refrigerated as boolean",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> product",
				"warehouse, location join(warehouse@LocationID == location@LocationID,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1 select(mapColumn(",
				"          WarehouseID,",
				"          WarehouseName,",
				"          isRefrigerated,",
				"          LocationID = warehouse@LocationID,",
				"          LocationID = location@LocationID,",
				"          LocationName,",
				"          LocationAddress",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"inventory, select1 join(inventory@WarehouseID == select1@WarehouseID,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join2",
				"join2 select(mapColumn(",
				"          InventoryID,",
				"          InventoryAvailable,",
				"          MinStockLevel,",
				"          MaxStockLevel,",
				"          ReorderPoint,",
				"          WarehouseID = inventory@WarehouseID,",
				"          ProductID,",
				"          WarehouseID = select1@WarehouseID,",
				"          WarehouseName,",
				"          isRefrigerated,",
				"          LocationID,",
				"          LocationName,",
				"          LocationAddress",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"select2, product join(select2@ProductID == product@ProductID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join3",
				"join3 select(mapColumn(",
				"          InventoryID,",
				"          InventoryAvailable,",
				"          MinStockLevel,",
				"          MaxStockLevel,",
				"          ReorderPoint,",
				"          WarehouseID,",
				"          ProductID = select2@ProductID,",
				"          WarehouseName,",
				"          isRefrigerated,",
				"          LocationID,",
				"          LocationName,",
				"          LocationAddress,",
				"          ProductID = product@ProductID,",
				"          ProductCode,",
				"          BarCode,",
				"          ProductName,",
				"          ProductDescription,",
				"          ProductCategory,",
				"          CostPrice,",
				"          SellPrice,",
				"          MaxretailPrice,",
				"          ReorderQuantity,",
				"          PackedWeight,",
				"          PackedHeight,",
				"          PackedWidth,",
				"          PackedDepth,",
				"          Refrigerated",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select3",
				"select3 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
			]
		}
	}
}