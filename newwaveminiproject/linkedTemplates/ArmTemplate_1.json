{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "newwaveminiproject"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTable6')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "raw",
					"table": "item_data"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTable7')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "raw",
					"table": "final_data"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "AzureSqlTable4",
								"type": "DatasetReference"
							},
							"name": "inventory"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlTableWarehouse",
								"type": "DatasetReference"
							},
							"name": "warehouse"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlTableLocation",
								"type": "DatasetReference"
							},
							"name": "location"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlTable3",
								"type": "DatasetReference"
							},
							"name": "product"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTable5",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "join1"
						},
						{
							"name": "select1"
						},
						{
							"name": "join2"
						},
						{
							"name": "select2"
						},
						{
							"name": "join3"
						},
						{
							"name": "select3"
						}
					],
					"scriptLines": [
						"source(output(",
						"          InventoryID as string,",
						"          InventoryAvailable as long,",
						"          MinStockLevel as long,",
						"          MaxStockLevel as long,",
						"          ReorderPoint as long,",
						"          WarehouseID as string,",
						"          ProductID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> inventory",
						"source(output(",
						"          WarehouseID as string,",
						"          WarehouseName as string,",
						"          isRefrigerated as boolean,",
						"          LocationID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> warehouse",
						"source(output(",
						"          LocationID as string,",
						"          LocationName as string,",
						"          LocationAddress as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> location",
						"source(output(",
						"          ProductID as string,",
						"          ProductCode as string,",
						"          BarCode as long,",
						"          ProductName as string,",
						"          ProductDescription as string,",
						"          ProductCategory as string,",
						"          CostPrice as double,",
						"          SellPrice as double,",
						"          MaxretailPrice as string,",
						"          ReorderQuantity as integer,",
						"          PackedWeight as integer,",
						"          PackedHeight as integer,",
						"          PackedWidth as integer,",
						"          PackedDepth as integer,",
						"          Refrigerated as boolean",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> product",
						"warehouse, location join(warehouse@LocationID == location@LocationID,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 select(mapColumn(",
						"          WarehouseID,",
						"          WarehouseName,",
						"          isRefrigerated,",
						"          LocationID = warehouse@LocationID,",
						"          LocationID = location@LocationID,",
						"          LocationName,",
						"          LocationAddress",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"inventory, select1 join(inventory@WarehouseID == select1@WarehouseID,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join2",
						"join2 select(mapColumn(",
						"          InventoryID,",
						"          InventoryAvailable,",
						"          MinStockLevel,",
						"          MaxStockLevel,",
						"          ReorderPoint,",
						"          WarehouseID = inventory@WarehouseID,",
						"          ProductID,",
						"          WarehouseID = select1@WarehouseID,",
						"          WarehouseName,",
						"          isRefrigerated,",
						"          LocationID,",
						"          LocationName,",
						"          LocationAddress",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"select2, product join(select2@ProductID == product@ProductID,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join3",
						"join3 select(mapColumn(",
						"          InventoryID,",
						"          InventoryAvailable,",
						"          MinStockLevel,",
						"          MaxStockLevel,",
						"          ReorderPoint,",
						"          WarehouseID,",
						"          ProductID = select2@ProductID,",
						"          WarehouseName,",
						"          isRefrigerated,",
						"          LocationID,",
						"          LocationName,",
						"          LocationAddress,",
						"          ProductID = product@ProductID,",
						"          ProductCode,",
						"          BarCode,",
						"          ProductName,",
						"          ProductDescription,",
						"          ProductCategory,",
						"          CostPrice,",
						"          SellPrice,",
						"          MaxretailPrice,",
						"          ReorderQuantity,",
						"          PackedWeight,",
						"          PackedHeight,",
						"          PackedWidth,",
						"          PackedDepth,",
						"          Refrigerated",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select3",
						"select3 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow2')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DelimitedText1",
								"type": "DatasetReference"
							},
							"name": "source1"
						},
						{
							"dataset": {
								"referenceName": "ScrapedData",
								"type": "DatasetReference"
							},
							"name": "source2"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTable7",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "select1"
						},
						{
							"name": "join1"
						},
						{
							"name": "select2"
						}
					],
					"scriptLines": [
						"source(output(",
						"          categoryCode as string,",
						"          categoryName as string,",
						"          seriesCode as string,",
						"          seriesName as string,",
						"          brandName as string,",
						"          earliestShipping as integer,",
						"          description as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source(output(",
						"          {Item } as string,",
						"          {Sub Category} as string,",
						"          Category as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source2",
						"source1 select(mapColumn(",
						"          categoryCode,",
						"          categoryName,",
						"          seriesCode,",
						"          seriesName,",
						"          brandName,",
						"          earliestShipping",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1, source2 join(categoryName == {Item },",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 select(mapColumn(",
						"          categoryCode,",
						"          Category,",
						"          {Sub Category},",
						"          {Item },",
						"          seriesCode,",
						"          seriesName,",
						"          brandName,",
						"          earliestShipping",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"select2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable7')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Ingestionpipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy Products",
						"type": "Copy",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "MongoDbAtlasSource",
								"batchSize": 100
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBatchSize": 1000,
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "$['_id']['$oid']"
										},
										"sink": {
											"name": "ProductID",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['ProductCode']"
										},
										"sink": {
											"name": "ProductCode",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['BarCode']"
										},
										"sink": {
											"name": "BarCode",
											"type": "Int64"
										}
									},
									{
										"source": {
											"path": "$['ProductName']"
										},
										"sink": {
											"name": "ProductName",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['ProductDescription']"
										},
										"sink": {
											"name": "ProductDescription",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['ProductCategory']"
										},
										"sink": {
											"name": "ProductCategory"
										}
									},
									{
										"source": {
											"path": "$['CostPrice']['$numberDouble']"
										},
										"sink": {
											"name": "CostPrice",
											"type": "Double"
										}
									},
									{
										"source": {
											"path": "$['SellPrice']['$numberDouble']"
										},
										"sink": {
											"name": "SellPrice",
											"type": "Double"
										}
									},
									{
										"source": {
											"path": "$['MaxretailPrice']['$numberDouble']"
										},
										"sink": {
											"name": "MaxretailPrice"
										}
									},
									{
										"source": {
											"path": "$['ReorderQuantity']['$numberLong']"
										},
										"sink": {
											"name": "ReorderQuantity",
											"type": "Int32"
										}
									},
									{
										"source": {
											"path": "$['PackedWeight']['$numberDouble']"
										},
										"sink": {
											"name": "PackedWeight",
											"type": "Int32"
										}
									},
									{
										"source": {
											"path": "$['PackedHeight']['$numberDouble']"
										},
										"sink": {
											"name": "PackedHeight",
											"type": "Int32"
										}
									},
									{
										"source": {
											"path": "$['PackedWidth']['$numberDouble']"
										},
										"sink": {
											"name": "PackedWidth",
											"type": "Int32"
										}
									},
									{
										"source": {
											"path": "$['PackedDepth']['$numberDouble']"
										},
										"sink": {
											"name": "PackedDepth",
											"type": "Int32"
										}
									},
									{
										"source": {
											"path": "$['Refrigerated']"
										},
										"sink": {
											"name": "Refrigerated",
											"type": "Boolean"
										}
									}
								],
								"mapComplexValuesToString": true
							}
						},
						"inputs": [
							{
								"referenceName": "MongoDbAtlasCollection1",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSqlTable3",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy Warehouse",
						"type": "Copy",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "MongoDbAtlasSource",
								"batchSize": 100
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "$['_id']['$oid']"
										},
										"sink": {
											"name": "WarehouseID",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['WarehouseName']"
										},
										"sink": {
											"name": "WarehouseName",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['isRefrigerated']"
										},
										"sink": {
											"name": "isRefrigerated",
											"type": "Boolean"
										}
									},
									{
										"source": {
											"path": "$['LocationID']['$oid']"
										},
										"sink": {
											"name": "LocationID",
											"type": "String"
										}
									}
								],
								"collectionReference": "",
								"mapComplexValuesToString": true
							}
						},
						"inputs": [
							{
								"referenceName": "MongoDbAtlasCollection2",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSqlTableWarehouse",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy Inventory",
						"type": "Copy",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "MongoDbAtlasSource",
								"batchSize": 100
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "$['_id']['$oid']"
										},
										"sink": {
											"name": "InventoryID",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['InventoryAvailable']['$numberLong']"
										},
										"sink": {
											"name": "InventoryAvailable",
											"type": "Int64"
										}
									},
									{
										"source": {
											"path": "$['MinStockLevel']['$numberLong']"
										},
										"sink": {
											"name": "MinStockLevel",
											"type": "Int64"
										}
									},
									{
										"source": {
											"path": "$['MaxStockLevel']['$numberLong']"
										},
										"sink": {
											"name": "MaxStockLevel",
											"type": "Int64"
										}
									},
									{
										"source": {
											"path": "$['ReorderPoint']['$numberLong']"
										},
										"sink": {
											"name": "ReorderPoint",
											"type": "Int64"
										}
									},
									{
										"source": {
											"path": "$['WarehouseID']['$oid']"
										},
										"sink": {
											"name": "WarehouseID",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['ProductID']['$oid']"
										},
										"sink": {
											"name": "ProductID",
											"type": "String"
										}
									}
								],
								"mapComplexValuesToString": true
							}
						},
						"inputs": [
							{
								"referenceName": "MongoDbAtlasCollection3",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSqlTable4",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy Location",
						"type": "Copy",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "MongoDbAtlasSource",
								"batchSize": 100
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "$['_id']['$oid']"
										},
										"sink": {
											"name": "LocationID",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['LocationName']"
										},
										"sink": {
											"name": "LocationName"
										}
									},
									{
										"source": {
											"path": "$['LocationAddress']"
										},
										"sink": {
											"name": "LocationAddress"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "MongoLocation",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSqlTableLocation",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow2",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"source2": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflow2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/prepCount')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow1",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"inventory": {},
									"warehouse": {},
									"location": {},
									"product": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflow1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/prepfact')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow1",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"inventory": {},
									"warehouse": {},
									"location": {},
									"product": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflow1')]"
			]
		}
	]
}